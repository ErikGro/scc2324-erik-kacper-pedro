apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-app
  template:
    metadata:
      labels:
        app: backend-app
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
        - name: backend-app
          image: subsurfer/backend-kacper-erik-pedro
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 256Mi
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: "/mnt/vol"
              name: mediavolume
          env:
            - name: REDIS_HOSTNAME
              value: "redis"
            - name: MEDIA_ROOT_DIR
              value: "/mnt/vol"
            - name: MONGODB_CONNECTION_STRING
              value: "mongodb://root:moinmoinWHATUpplsGoodGrade@mongo:27017/"
      volumes:
        - name: mediavolume
          persistentVolumeClaim:
            claimName: azure-managed-disk
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: redis
        image: mcr.microsoft.com/oss/bitnami/redis:6.0.8
        imagePullPolicy: Always
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
  - port: 6379
  selector:
    app: redis
---
apiVersion: v1
kind: Service
metadata:
  name: backend-app-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: backend-app
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-managed-disk
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: azurefile
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
        - name: mongo
          image: mongo
          imagePullPolicy: Always
          env:
            - name: "MONGO_INITDB_ROOT_USERNAME"
              value: root
            - name: "MONGO_INITDB_ROOT_PASSWORD"
              value: moinmoinWHATUpplsGoodGrade
          ports:
            - containerPort: 27017
              name: mongo
          volumeMounts:
            - mountPath: "/data/db"
              name: mongovolume
      volumes:
        - name: mongovolume
          persistentVolumeClaim:
            claimName: mongo-storage
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

